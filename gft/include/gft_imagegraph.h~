/*
IFT:
custo favoravel   0 
custo normal      > 0, < INT_MAX
aresta impossivel INT_MAX

GC:
custo favoravel   INT_MAX = CAP_MAX
custo normal      > 0, < INT_MAX
aresta impossivel 0
*/

#ifndef _GFT_IMAGEGRAPH_H_
#define _GFT_IMAGEGRAPH_H_

#include "gft_common.h"
#include "gft_image32.h"
#include "gft_cimage.h"
#include "gft_adjrel.h"
#include "gft_filtering.h"
#include "gft_queue.h"


namespace gft{
  namespace ImageGraph{

#define DISSIMILARITY 0
#define CAPACITY      1

    // Image Sparse Graph:
    // n-links connect pairs of neighboring pixels.
    struct sImageGraph {
      int type;
      int Wmax;
      int **n_link;
      int ncols, nrows;
      sAdjRel *A;
    };
    
    sImageGraph *ByAbsDiff(sImage32 *img, float r);
    sImageGraph *ByAbsDiff(sCImage *cimg,  float r);
    sImageGraph *ByAbsDiff(sCImage32f *cimg,  float r);
    
    sImageGraph *ByAccAbsDiff(sImage32 *img, float r, float R);
    sImageGraph *ByAccAbsDiff(sCImage *cimg, float r, float R);
    sImageGraph *ByWeightImage(sImage32 *W, float r);
    
    sImageGraph *ByHomogeneityAffinity(sImage32 *img, float r);
    sImageGraph *ByCHomogeneityAffinity(sCImage *cimg, float r);
    
    
    sImageGraph  *WeightedMean(sImageGraph *G1, 
			       sImageGraph *G2,
			       float w2);
    sImageGraph  *ByLevel(sImage32 *obj, int T, float r, int Wmax);
    sImageGraph  *ByExclusion(sImage32 *Pobj,
			      sImage32 *Pbkg,
			      float r,
			      int Pmax);
    sImageGraph  *ByExclusion(sImage32 *Pobj,
			      float r,
			      int Pmax);
    
    void LinearStretch(sImageGraph *sg, 
		       int f1, int f2, 
		       int g1, int g2);

    sImageGraph  *SaliencyMap(char mergehistory[],
			      int ncols, int nrows);
    
    //------ ImageGraph Functions ------------
    
    int           get_edge_index(int p, int q, 
				 sImageGraph *g);
    
    void          Destroy(sImageGraph **g);
    sImageGraph  *Create(int ncols, int nrows, 
			 sAdjRel *A);
    sImageGraph  *Clone(sImageGraph *g);
    
    sImageGraph  *ReadFromTxt(char *filename);
    void          Write2Txt(sImageGraph *sg, 
			    char *filename);
    
    void          ChangeType(sImageGraph *sg, 
			     int type);
    
    void          ChangeWeight(sImageGraph *sg,
			       int old_val, int new_val);
    
    void          Pow(sImageGraph *sg, int power, int max);
    /*
    sImageGraph   *Convert2Symmetric(sImageGraph *g,
    int method);
    void  SuppressZeroWeightedArcs(sImageGraph *sg);
    */
    
    void Transpose(sImageGraph *sg);
    
    sImage32 *ArcWeightImage(sImageGraph *sg);
    sImage32 *KhalimskyGrid(sImageGraph *sg);
    sImage32 *LabelConnectedComponent(sImageGraph *sg,
				      int wmin, int wmax);
    
    void Orient2Digraph(sImageGraph *sg, 
			sImage32 *img,
			float per);
    
    void Orient2DigraphInner(sImageGraph *sg, 
			     sImage32 *P_sum);
    void Orient2DigraphOuter(sImageGraph *sg, 
			     sImage32 *P_sum);
    
    void Convert2HedgehogDigraph(sImageGraph *sg,
				 sImage32 *cost,
				 float theta);

    void ComputeMinMaxArcs(sImageGraph *sg,
			   int *min, int *max);
    
    bool IsSymmetricDigraph(sImageGraph *sg);
    
    
  } //end ImageGraph namespace

  typedef ImageGraph::sImageGraph sImageGraph;

} //end gft namespace



#endif

